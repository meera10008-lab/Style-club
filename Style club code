import React, { useEffect, useState } from "react";

export default function App() {
  const [wardrobe, setWardrobe] = useState(() => {
    try {
      return JSON.parse(localStorage.getItem("wardrobe") || "[]");
    } catch {
      return [];
    }
  });

  const [itemType, setItemType] = useState("shirt");
  const [itemColor, setItemColor] = useState("Black");
  const [itemLabel, setItemLabel] = useState("Basic tee");
  const [itemBudget, setItemBudget] = useState("Under â‚¹1000");

  const [outfits, setOutfits] = useState([]);
  const [dailyOutfit, setDailyOutfit] = useState(null);
  const [uploadedImage, setUploadedImage] = useState(null);
  const [styleFeedback, setStyleFeedback] = useState("");
  const [ratedOutfits, setRatedOutfits] = useState([]);

  const perfumeGuide = [
    { occasion: "Work/Office", type: "Fresh citrus or aquatic fragrances" },
    { occasion: "Date Night", type: "Woody oriental with amber or spice" },
    { occasion: "Casual Outing", type: "Light fruity or aromatic scents" },
    { occasion: "Festive/Wedding", type: "Strong oud, amber, or oriental perfumes" },
    { occasion: "Gym/Sports", type: "Refreshing mint or marine notes" },
  ];

  const seasonalDressing = {
    Summer: "Light cotton shirts, linen pants, pastel colors, loafers, citrus perfumes.",
    Winter: "Layer sweaters, blazers, dark denim, boots, leather accessories, woody perfumes.",
    Monsoon: "Quick-dry fabrics, waterproof shoes, avoid long bottoms, fresh aquatic perfumes.",
    Festive: "Bright colors, traditional wear (kurta/blazer combo), elegant watch, oriental perfumes.",
  };

  const shoppingLinks = [
    { label: "Myntra â€” Shirts", url: "https://www.myntra.com/men-shirts", budget: "Under â‚¹1000" },
    { label: "Ajio â€” Jeans", url: "https://www.ajio.com/men-jeans", budget: "Under â‚¹5000" },
    { label: "Flipkart â€” Shoes", url: "https://www.flipkart.com/mens-footwear", budget: "Premium" },
    { label: "Amazon India â€” Watches", url: "https://www.amazon.in/mens-watches", budget: "Under â‚¹5000" },
    { label: "Zara", url: "https://www.zara.com", budget: "Premium" },
    { label: "H&M", url: "https://www2.hm.com", budget: "Under â‚¹5000" },
    { label: "ASOS", url: "https://www.asos.com", budget: "Premium" },
  ];

  useEffect(() => {
    localStorage.setItem("wardrobe", JSON.stringify(wardrobe));
    generateOutfits();
    pickDailyOutfit();
  }, [wardrobe]);

  function addItemToWardrobe() {
    const newItem = {
      id: Date.now(),
      type: itemType,
      color: itemColor,
      label: itemLabel,
      budget: itemBudget,
    };
    setWardrobe((prev) => [...prev, newItem]);
    setItemLabel("");
  }

  function removeItem(id) {
    setWardrobe((prev) => prev.filter((i) => i.id !== id));
  }

  function exportWardrobe() {
    const blob = new Blob([JSON.stringify(wardrobe, null, 2)], { type: "application/json" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "wardrobe.json";
    link.click();
  }

  function importWardrobe(e) {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = (event) => {
      try {
        setWardrobe(JSON.parse(event.target.result));
      } catch {
        alert("Invalid wardrobe file");
      }
    };
    reader.readAsText(file);
  }

  function generateOutfits() {
    const shirts = wardrobe.filter((i) => i.type === "shirt");
    const pants = wardrobe.filter((i) => i.type === "pant" || i.type === "jean");
    const jackets = wardrobe.filter((i) => i.type === "jacket");
    const shoes = wardrobe.filter((i) => i.type === "shoes");
    const combos = [];

    shirts.forEach((s) => {
      pants.forEach((p) => {
        combos.push([s, p]);
        jackets.forEach((j) => combos.push([s, p, j]));
        shoes.forEach((sh) => combos.push([s, p, sh]));
        jackets.forEach((j) =>
          shoes.forEach((sh) => combos.push([s, p, j, sh]))
        );
      });
    });

    setOutfits(combos);
  }

  function pickDailyOutfit() {
    if (outfits.length > 0) {
      const index = Math.floor(Math.random() * outfits.length);
      setDailyOutfit(outfits[index]);
    }
  }

  function handleImageUpload(e) {
    const file = e.target.files[0];
    if (file) {
      setUploadedImage(URL.createObjectURL(file));
      const feedbackOptions = [
        "Shirt fits well, consider darker shoes.",
        "Pant color works great, add a watch for style.",
        "Try a belt to complete this look.",
        "Overall solid, jacket could be slimmer fit.",
        "Nice combination, shoes could be swapped for loafers.",
      ];
      setStyleFeedback(feedbackOptions[Math.floor(Math.random() * feedbackOptions.length)]);
    }
  }

  function rateOutfit(outfit, rating) {
    setRatedOutfits((prev) => [...prev, { outfit, rating }]);
  }

  return (
    <div className="p-6 max-w-5xl mx-auto font-sans">
      <h1 className="text-3xl font-bold mb-6 text-center">ðŸ‘” StyleCoach Pro</h1>

      {/* Wardrobe Builder */}
      <section className="mb-6 p-4 border rounded shadow">
        <h2 className="text-xl font-semibold mb-2">My Wardrobe</h2>
        <div className="flex flex-wrap gap-2 mb-2">
          <select value={itemType} onChange={(e) => setItemType(e.target.value)} className="border p-1 rounded">
            <option value="shirt">Shirt</option>
            <option value="pant">Pant</option>
            <option value="jacket">Jacket</option>
            <option value="shoes">Shoes</option>
            <option value="watch">Watch</option>
            <option value="perfume">Perfume</option>
          </select>
          <input placeholder="Color" value={itemColor} onChange={(e) => setItemColor(e.target.value)} className="border p-1 rounded" />
          <input placeholder="Label" value={itemLabel} onChange={(e) => setItemLabel(e.target.value)} className="border p-1 rounded" />
          <select value={itemBudget} onChange={(e) => setItemBudget(e.target.value)} className="border p-1 rounded">
            <option>Under â‚¹1000</option>
            <option>Under â‚¹5000</option>
            <option>Premium</option>
          </select>
          <button onClick={addItemToWardrobe} className="px-3 py-1 bg-blue-500 text-white rounded">Add</button>
        </div>
        <ul>
          {wardrobe.map((item) => (
            <li key={item.id} className="flex justify-between items-center p-1">
              {item.type} â€” {item.color} â€” {item.label} â€” {item.budget}
              <button onClick={() => removeItem(item.id)} className="text-red-500">x</button>
            </li>
          ))}
        </ul>
        <div className="mt-2 flex space-x-2">
          <button onClick={exportWardrobe} className="px-2 py-1 bg-green-500 text-white rounded">Export</button>
          <input type="file" onChange={importWardrobe} />
        </div>
      </section>

      {/* Daily Outfit */}
      {dailyOutfit && (
        <section className="mb-6 p-4 border rounded shadow">
          <h2 className="text-xl font-semibold mb-2">ðŸ‘• Daily Outfit Suggestion</h2>
          <p>{dailyOutfit.map((i) => i.label).join(", ")}</p>
        </section>
      )}

      {/* Photo Upload & AI Feedback */}
      <section className="mb-6 p-4 border rounded shadow">
        <h2 className="text-xl font-semibold mb-2">ðŸ“¸ Upload Your Outfit for AI Feedback</h2>
        <input type="file" accept="image/*" onChange={handleImageUpload} />
        {uploadedImage && <img src={uploadedImage} alt="Uploaded Outfit" className="mt-2 max-h-64 rounded" />}
        {styleFeedback && <p className="mt-2 font-semibold">AI Feedback: {styleFeedback}</p>}
      </section>

      {/* Perfume Guide */}
      <section className="mb-6 p-4 border rounded shadow">
        <h2 className="text-xl font-semibold mb-2">Perfume Guide</h2>
        <ul className="list-disc list-inside">
          {perfumeGuide.map((p, i) => (
            <li key={i}>{p.occasion}: {p.type}</li>
          ))}
        </ul>
      </section>

      {/* Seasonal Dressing */}
      <section className="mb-6 p-4 border rounded shadow">
        <h2 className="text-xl font-semibold mb-2">Seasonal Dressing</h2>
        {Object.entries(seasonalDressing).map(([season, tip]) => (
          <p key={season}><b>{season}:</b> {tip}</p>
        ))}
      </section>

      {/* Shopping Links */}
      <section className="mb-6 p-4 border rounded shadow">
        <h2 className="text-xl font-semibold mb-2">ðŸ›’ Shopping Links by Budget</h2>
        <ul className="list-disc list-inside">
          {shoppingLinks.map((link, i) => (
            <li key={i}>
              <a href={link.url} target="_blank" rel="noopener noreferrer" className="text-blue-500 underline">
                {link.label} ({link.budget})
              </a>
            </li>
          ))}
        </ul>
      </section>
    </div>
  );
